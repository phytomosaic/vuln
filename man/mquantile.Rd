% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mquantile.R
\name{cond_cdf}
\alias{cond_cdf}
\alias{joint_cdf}
\title{Conditional and joint multivariate quantiles}
\usage{
cond_cdf(x, pltype, ngrid, ...)

joint_cdf(x, pltype, ngrid, ...)
}
\arguments{
\item{x}{vector, matrix, or data.frame of observations.}

\item{pltype}{character, plot type, one of
\code{c('none','cdf','pairs','rgl','persp')}.}

\item{ngrid}{vector, number of grid points.}

\item{...}{further arguments passed to other functions.}
}
\value{
Plots to device, or else object of class \code{'zzz'}.
}
\description{
Quantiles of observations in multivariate space.
}
\details{
Where:\cr
     X \verb{    } = n x m matrix,\cr
     EPDF \verb{} = empirical probability distribution function
     (density), and\cr
     ECDF \verb{} = empirical cumulative distribution function;


     Then three possible multivariate quantiles are:

     [1] Marginal quantile: from ECDF of raw data for EACH axis
     independently (so yields m separate vectors each of length
     n).

     [2] Joint quantile: from ECDF of raw data across ALL m axes
     simultaneously (so yields 1 vector of length n); always
     monotonically increasing toward higher axis values.

     [3] Conditional quantile: from the ECDF of the EPDF of ALL m
     axes simultaneously (so yields 1 vector of length n);
     monotonically increasing toward lower \emph{density} values,
     but may vary with respect to \emph{axis} values.

Conditional quantiles are analogous to data depth methods; current
     implementation allows 1-6 dimensions. Joint quantiles are
     analogous to Pareto frontiers; current implementation allows
     1-3 dimensions.
}
\examples{
# iris data
x <- iris[,1:3]
cond_cdf(x, 'pairs')
joint_cdf(x, 'pairs')
cond_cdf(x, 'rgl')
joint_cdf(x, 'rgl')

# dustbunny data
set.seed(23)
x <- data.frame(q = rnorm(99,0,5)^2,
                r = rnorm(99,0,5)^2,
                s = rnorm(99,10,10)^2)
cond_cdf(x, 'pairs')
joint_cdf(x, 'pairs')
cond_cdf(x, 'rgl')
joint_cdf(x, 'rgl')

}
